package com.nano.todoapp.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.nano.todoapp.pojo.Todo;
import com.nano.todoapp.util.ExceptionUtil;

@Service
public class DefaultTodoService implements TodoService {
	
	private static int currentTodoId = 5;
	
	private List<Todo> listOfTodos = new ArrayList<>(Arrays.asList(
			new Todo(1, "Code", "Code till hibernate", false, new Date(), new Date()),
			new Todo(2, "Java", "Java till hibernate", false, new Date(), new Date()),
			new Todo(3, "AOP", "AOP till hibernate", false, new Date(), new Date()),
			new Todo(4, "Exception Handling", "Exception Handling till hibernate", false, new Date(), new Date()),
			new Todo(5, "Hibernate Connection", "DB setup and connection", false, new Date(), new Date())
	));

	@Override
	public List<Todo> getTodos() {
		
		return this.listOfTodos;
	}

	@Override
	public int addTodo(Todo todo){
		Todo existingTodo = getTodo(todo.getId());
		ExceptionUtil.throwExceptionIftrue( existingTodo.getTitle().equals(todo.getTitle()), "Todo with same title exists");
		if(todo.getId() == 0) todo.setId(++currentTodoId);
		this.listOfTodos.add(todo);
		return 0;
	}

	@Override
	public Todo getTodo(int id) {
		Todo todo = null;
		Optional<Todo> opt = this.listOfTodos.stream().filter(existTodo -> existTodo.getId() == id).findAny();
		if(opt.isPresent()) todo = opt.get();
		else ExceptionUtil.throwExceptionIftrue(true, "Todo not found");
		return todo;
	}

	@Override
	public int updateTodo(Todo updatedTodo) {
		Todo existingTodo = getTodo(updatedTodo.getId());
		
		return 0;
	}

}
